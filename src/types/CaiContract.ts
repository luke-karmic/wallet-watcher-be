/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CaiContractInterface extends utils.Interface {
  functions: {
    "_fees()": FunctionFragment;
    "_isExcludedMaxTransactionAmount(address)": FunctionFragment;
    "_isExcludedMaxWalletAmount(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "excludeFromFees(address,bool)": FunctionFragment;
    "excludeFromMaxTransaction(address,bool)": FunctionFragment;
    "excludeFromWalletLimit(address,bool)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "isSwapping()": FunctionFragment;
    "marketPair(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setMarketPair(address,bool)": FunctionFragment;
    "setWallets(address,address)": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "swapTrading()": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleSwapEnabled(bool)": FunctionFragment;
    "tokensForContestAI()": FunctionFragment;
    "tokensForLiquidity()": FunctionFragment;
    "tokensForMarketing()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "updateFees(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateMaxTxnAmount(uint256,uint256)": FunctionFragment;
    "updateMaxWalletAmount(uint256)": FunctionFragment;
    "updateThresholdSwapAmount(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_fees"
      | "_isExcludedMaxTransactionAmount"
      | "_isExcludedMaxWalletAmount"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "decreaseAllowance"
      | "excludeFromFees"
      | "excludeFromMaxTransaction"
      | "excludeFromWalletLimit"
      | "increaseAllowance"
      | "isExcludedFromFees"
      | "isSwapping"
      | "marketPair"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "router"
      | "setMarketPair"
      | "setWallets"
      | "swapEnabled"
      | "swapTrading"
      | "symbol"
      | "toggleSwapEnabled"
      | "tokensForContestAI"
      | "tokensForLiquidity"
      | "tokensForMarketing"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "updateFees"
      | "updateMaxTxnAmount"
      | "updateMaxWalletAmount"
      | "updateThresholdSwapAmount"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_fees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_isExcludedMaxTransactionAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_isExcludedMaxWalletAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxTransaction",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromWalletLimit",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSwapping",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "marketPair", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMarketPair",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWallets",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTrading",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleSwapEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForContestAI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForMarketing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxTxnAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxWalletAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateThresholdSwapAmount",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_isExcludedMaxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isExcludedMaxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromWalletLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSwapping", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWallets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForContestAI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForMarketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxTxnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateThresholdSwapAmount",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapAndLiquify(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SwapAndLiquifyEventObject {
  tokensSwapped: BigNumber;
  ethReceived: BigNumber;
}
export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber],
  SwapAndLiquifyEventObject
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface CaiContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CaiContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _fees(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        buyTotalFees: BigNumber;
        buyMarketingFee: BigNumber;
        buyContestAIFee: BigNumber;
        buyLiquidityFee: BigNumber;
        sellTotalFees: BigNumber;
        sellMarketingFee: BigNumber;
        sellContestAIFee: BigNumber;
        sellLiquidityFee: BigNumber;
      }
    >;

    _isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _isExcludedMaxWalletAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    excludeFromWalletLimit(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSwapping(overrides?: CallOverrides): Promise<[boolean]>;

    marketPair(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setMarketPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWallets(
      _marketingWallet: string,
      _contestAIWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    swapTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleSwapEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokensForContestAI(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensForMarketing(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    updateFees(
      _marketingFeeBuy: BigNumberish,
      _liquidityFeeBuy: BigNumberish,
      _contestAIFeeBuy: BigNumberish,
      _marketingFeeSell: BigNumberish,
      _liquidityFeeSell: BigNumberish,
      _contestAIFeeSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateMaxTxnAmount(
      newMaxBuy: BigNumberish,
      newMaxSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateMaxWalletAmount(
      newPercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateThresholdSwapAmount(
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  _fees(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      buyTotalFees: BigNumber;
      buyMarketingFee: BigNumber;
      buyContestAIFee: BigNumber;
      buyLiquidityFee: BigNumber;
      sellTotalFees: BigNumber;
      sellMarketingFee: BigNumber;
      sellContestAIFee: BigNumber;
      sellLiquidityFee: BigNumber;
    }
  >;

  _isExcludedMaxTransactionAmount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isExcludedMaxWalletAmount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  excludeFromFees(
    account: string,
    excluded: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  excludeFromMaxTransaction(
    updAds: string,
    isEx: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  excludeFromWalletLimit(
    account: string,
    excluded: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isExcludedFromFees(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSwapping(overrides?: CallOverrides): Promise<boolean>;

  marketPair(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setMarketPair(
    pair: string,
    value: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWallets(
    _marketingWallet: string,
    _contestAIWallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  swapTrading(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleSwapEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokensForContestAI(overrides?: CallOverrides): Promise<BigNumber>;

  tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  updateFees(
    _marketingFeeBuy: BigNumberish,
    _liquidityFeeBuy: BigNumberish,
    _contestAIFeeBuy: BigNumberish,
    _marketingFeeSell: BigNumberish,
    _liquidityFeeSell: BigNumberish,
    _contestAIFeeSell: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateMaxTxnAmount(
    newMaxBuy: BigNumberish,
    newMaxSell: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateMaxWalletAmount(
    newPercentage: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateThresholdSwapAmount(
    newAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    _fees(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        buyTotalFees: BigNumber;
        buyMarketingFee: BigNumber;
        buyContestAIFee: BigNumber;
        buyLiquidityFee: BigNumber;
        sellTotalFees: BigNumber;
        sellMarketingFee: BigNumber;
        sellContestAIFee: BigNumber;
        sellLiquidityFee: BigNumber;
      }
    >;

    _isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isExcludedMaxWalletAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromWalletLimit(
      account: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSwapping(overrides?: CallOverrides): Promise<boolean>;

    marketPair(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setMarketPair(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWallets(
      _marketingWallet: string,
      _contestAIWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    swapTrading(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleSwapEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensForContestAI(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    updateFees(
      _marketingFeeBuy: BigNumberish,
      _liquidityFeeBuy: BigNumberish,
      _contestAIFeeBuy: BigNumberish,
      _marketingFeeSell: BigNumberish,
      _liquidityFeeSell: BigNumberish,
      _contestAIFeeSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxTxnAmount(
      newMaxBuy: BigNumberish,
      newMaxSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxWalletAmount(
      newPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateThresholdSwapAmount(
      newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SwapAndLiquify(uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null
    ): SwapAndLiquifyEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    _fees(overrides?: CallOverrides): Promise<BigNumber>;

    _isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isExcludedMaxWalletAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    excludeFromWalletLimit(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSwapping(overrides?: CallOverrides): Promise<BigNumber>;

    marketPair(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setMarketPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWallets(
      _marketingWallet: string,
      _contestAIWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    swapTrading(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleSwapEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokensForContestAI(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    updateFees(
      _marketingFeeBuy: BigNumberish,
      _liquidityFeeBuy: BigNumberish,
      _contestAIFeeBuy: BigNumberish,
      _marketingFeeSell: BigNumberish,
      _liquidityFeeSell: BigNumberish,
      _contestAIFeeSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateMaxTxnAmount(
      newMaxBuy: BigNumberish,
      newMaxSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateMaxWalletAmount(
      newPercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateThresholdSwapAmount(
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _fees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isExcludedMaxWalletAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    excludeFromWalletLimit(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSwapping(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketPair(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMarketPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWallets(
      _marketingWallet: string,
      _contestAIWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapTrading(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleSwapEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokensForContestAI(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensForLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensForMarketing(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateFees(
      _marketingFeeBuy: BigNumberish,
      _liquidityFeeBuy: BigNumberish,
      _contestAIFeeBuy: BigNumberish,
      _marketingFeeSell: BigNumberish,
      _liquidityFeeSell: BigNumberish,
      _contestAIFeeSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateMaxTxnAmount(
      newMaxBuy: BigNumberish,
      newMaxSell: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateMaxWalletAmount(
      newPercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateThresholdSwapAmount(
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
